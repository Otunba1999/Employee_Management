@implements IDisposable

@if (AppState.ShowEmployee)
{
    if (ShowAddOrUpdate)
    {
        <div class="container">
    <div class="row mt-5">
        <div class="col-lg-1 text-center"><i class="bi bi-x-lg fs-3 fw-bold text danger" style="cursor: pointer;"
                @onclick="CloseForm"></i></div>
        <div class="col-lg-6 text-center">
            <h2>@Title Employee</h2>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12 mt-2 mb-5 d-flex justify-content-center">
            <div class="hstack">
                @if (FirstLayer)
                        {
                            <div class="@FloatingNumber1 text-center">1</div>
                            <div class="@FloatingDiv1 format-border"></div>
                            <div class="@FloatingNumber2 text-center">2</div>
                            <div class="@FloatingDiv2 format-border"></div>
                        }
                        @if (SecondLayer)
                        {
                            <div class="@FloatingNumber1 text-center">1</div>
                            <div class="@FloatingDiv1 format-border"></div>
                            <div class="@FloatingNumber2 text-center">2</div>
                            <div class="@FloatingDiv2 format-border"></div>
                        }
                    </div>
                </div>
                <div class="col-lg-12">
                    <div class="container-fluid">
                        @if (FirstLayer)
                        {
                            <EditForm Model="EmployeeGroup1" Enhance OnValidSubmit="Form1">
                                <DataAnnotationsValidator />
                                <div class="row">
                                    <div class="col-lg-2"></div>
                                    <div class="col-lg-4">
                                        <div class="card-title mb-5 fw-bold" style="font-family: Tahoma;">Personal Information</div>
                                        <div class="card-body">
                                            <div class="form-group">
                                                <label for="fullname" class="form-label">Fullname</label>
                                                <InputText class="form-group" @bind-Value="EmployeeGroup1.Name" id="fullname" />
                                                <ValidationMessage For="() => EmployeeGroup1.Name" class="text-danger" />
                                            </div>
                                            <div class="form-group mt-2">
                                                <label for="phone" class="form-label">Telephone</label>
                                                <InputText class="form-group" @bind-Value="EmployeeGroup1.TelephoneNumber"
                                                    id="phone" />
                                                <ValidationMessage For="() => EmployeeGroup1.TelephoneNumber" class="text-danger" />
                                            </div>
                                            <div class="form-group mt-2">
                                                <label for="address" class="form-label">Address</label>
                                                <InputText class="form-group" @bind-Value="EmployeeGroup1.Address" id="address" />
                                                <ValidationMessage For="() => EmployeeGroup1.Address" class="text-danger" />
                                            </div>
                                            <div class="form-control mt-2">
                                                <img src="@EmployeeGroup1.Photo" width="100" height="100" alt="">
                                            </div>    

                                        </div>
                                    </div>
                                    <div class="col-lg-4">
                                        <div class="card-title mb-5 fw-bold" style="font-family: Tahoma;">Other Information</div>
                                        <div class="card-body">
                                            <div class="form-group mt-2">
                                                <label for="civilId" class="form-label">Civil Id</label>
                                                <InputText class="form-group" @bind-Value="EmployeeGroup1.CivilId" id="civilId" />
                                                <ValidationMessage For="() => EmployeeGroup1.CivilId" class="text-danger" />
                                            </div>
                                            <div class="form-group mt-2">
                                                <label for="fileNumber" class="form-label">File Number</label>
                                                <InputText class="form-group" @bind-Value="EmployeeGroup1.FileNumber"
                                                    id="fileNumber" />
                                                <ValidationMessage For="() => EmployeeGroup1.FileNumber" class="text-danger" />
                                            </div>
                                            <div class="form-group mt-2">
                                                <label for="photo" class="form-label @(ImageUploadMessage == "" ? "" : "text-danger")">
                                                    @(ImageUploadMessage == "" ? "Upload Image" : ImageUploadMessage)
                                                </label>
                                                <InputFile class="form-group" OnChange="UploadImage" id="photo" />
                                                <ValidationMessage For="() => EmployeeGroup1.Photo" class="text-danger" />
                                            </div>
                                        </div>
                                    </div>
                                    <div class="form-group mt-5">
                                        <button class="btn btn-primary float-end mb-5 mt-4" type="submit">
                                            <i class="bi bi-arrow-right"></i>Next
                                        </button>
                                    </div>
                                    <div class="col-lg-2"></div>
                                </div>
                            </EditForm>
                        }
                        @if (SecondLayer)
                        {
                            <EditForm Model="EmployeeGroup2" Enhance OnValidSubmit="Form2">
                                <DataAnnotationsValidator />
                                <div class="row">
                                    <div class="col-lg-2"></div>
                                    <div class="col-lg-4">
                                        <div class="card-title mb-5 fw-bold" style="font-family: Tahoma;">Job Information</div>
                                        <div class="card-body">
                                            <div class="form-group">
                                                <label for="jobName" class="form-label">Job Name</label>
                                                <InputText class="form-group" @bind-Value="EmployeeGroup2.JobName" id="jobName" />
                                                <ValidationMessage For="() => EmployeeGroup2.JobName" class="text-danger" />
                                            </div>
                                            <div class="form-group mt-3">
                                                @{
                                                    string generalDepartment = GeneralDepartment.Equals("") ? "Select general department" : GeneralDepartment;
                                                }
                                                <label for="" class="form-label">Select General Department</label>
                                                <SfDropDownList TValue="string" TItem="GenaralDepartement"
                                                    Placeholder="@generalDepartment" DataSource="GeneralDepartments">
                                                    <DropDownListFieldSettings Value="Id" Text="Name" />
                                                    <DropDownListEvents TValue="string" TItem="GenaralDepartement"
                                                        ValueChange="OnGeneralDepartmentValueChange"></DropDownListEvents>
                                                </SfDropDownList>
                                            </div>
                                            <div class="form-group mt-3">
                                                @{
                                                    string department = Department.Equals("") ? "Select  department" : Department;
                                                }
                                                <label for="" class="form-label">Select Department</label>
                                                <SfDropDownList TValue="string" TItem="Department" Placeholder="@department"
                                                    DataSource="Departments">
                                                    <DropDownListFieldSettings Value="Id" Text="Name" />
                                                    <DropDownListEvents TValue="string" TItem="Department"
                                                        ValueChange="OnDepartmentValueChange"></DropDownListEvents>
                                                </SfDropDownList>
                                            </div>
                                            <div class="form-group mt-3">
                                                 @{
                                                    string branch = Branch.Equals("") ? "Select  Branch" : Branch;
                                                }
                                               <label for="" class="form-label">Select Branch</label>
                                                <SfDropDownList TValue="string" TItem="Branch" Placeholder="@branch"
                                                    DataSource="Branches">
                                                    <DropDownListFieldSettings Value="Id" Text="Name" />
                                                    <DropDownListEvents TValue="string" TItem="Branch"
                                                        ValueChange="OnBranchValueChange"></DropDownListEvents>
                                                </SfDropDownList>
                                                <ValidationMessage For="() => EmployeeGroup2.BranchId" class="text-danger" />
                                            </div>
                                            <div class="form-group mt-4 mb-5">
                                                <button class="btn btn-primary float-end" type="button" @onclick="PrevClicked">
                                                    <i class="bi bi-arrow-left"></i>Prev
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-lg-4">
                                        <div class="card-title mb-5 fw-bold" style="font-family: Tahoma;">Location Information</div>
                                        <div class="card-body">

                                            <div class="form-group">
                                                 @{
                                                    string country = Country.Equals("") ? "Select  Country" : Country;
                                                }
                                                <label for="" class="form-label">Select Country</label>
                                                <SfDropDownList TValue="string" TItem="Country" Placeholder="@country"
                                                    DataSource="Countries">
                                                    <DropDownListFieldSettings Value="Id" Text="Name" />
                                                    <DropDownListEvents TValue="string" TItem="Country"
                                                        ValueChange="OnCountryValueChange"></DropDownListEvents>
                                                </SfDropDownList>
                                            </div>
                                            <div class="form-group  mt-3">
                                                @{
                                                    string city = City.Equals("") ? "Select  City" : City;
                                                }
                                                <label for="" class="form-label">Select City</label>
                                                <SfDropDownList TValue="string" TItem="City" Placeholder="@city"
                                                    DataSource="Cities">
                                                    <DropDownListFieldSettings Value="Id" Text="Name" />
                                                    <DropDownListEvents TValue="string" TItem="City"
                                                        ValueChange="OnCityValueChange"></DropDownListEvents>
                                                </SfDropDownList>
                                            </div>
                                            <div class="form-group mt-3">
                                                 @{
                                                    string town = Town.Equals("") ? "Select  Town" : Town;
                                                }
                                                <label for="" class="form-label">Select Town</label>
                                                <SfDropDownList TValue="string" TItem="Town" Placeholder="@town"
                                                    DataSource="Towns">
                                                    <DropDownListFieldSettings Value="Id" Text="Name" />
                                                    <DropDownListEvents TValue="string" TItem="Town"
                                                        ValueChange="OnTownValueChange"></DropDownListEvents>
                                                </SfDropDownList>
                                                <ValidationMessage For="() => EmployeeGroup2.TownId" class="text-danger" />
                                            </div>
                                            <div class="form-group mt-3">
                                                <label for="other" class="form-label">Other</label>
                                                <textarea class="form-group" @bind"EmployeeGroup2.Other" id="other"
                                                    placeholder="Optional" />

                                            </div>
                                            <div class="form-group mt-4 mb-5">
                                                <button class="btn btn-success float-end" type="submit">
                                                    <i class="bi bi-save"></i>Save
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-lg-2"></div>

                                </div>
                            </EditForm>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
}
<style>
    .floatingDiv {
        width: 500px;
        height: 10px;
        background-color: #228ada;
    }

    .floatingNumber {
        border-radius: 50%;
        color: white;
        background: #1d1858;
        width: 20px;
        height: 20px;
    }

    .inactive-div {
        width: 500px;
        background: gray;
        height: 10px;
    }

    .inactive-span {
        border-radius: 50%;
        color: white;
        background: gray;
        width: 20px;
        height: 20px;
    }

    .format-border {
        border-radius: 20px;
    }
</style>

@code {
    [Parameter] public Employee Employee { get; set; } = new();
    [Parameter] public bool ShowAddOrUpdate { get; set; }
    [Parameter] public EmployeeGroup1 EmployeeGroup1 { get; set; } = new();
    [Parameter] public EmployeeGroup2 EmployeeGroup2 { get; set; } = new();
    [Parameter] public List<Country> Countries { get; set; } = new();
    [Parameter] public List<City> Cities { get; set; } = new();
    [Parameter] public List<Town> Towns { get; set; } = new();
    [Parameter] public List<GenaralDepartement> GeneralDepartments { get; set; } = new();
    [Parameter] public List<Department> Departments { get; set; } = new();
    [Parameter] public List<Branch> Branches { get; set; } = new();
    [Parameter] public EventCallback NotifyFormClosed { get; set; }
    [Parameter] public EventCallback<int> HandleCountrySelectEvent { get; set; }
    [Parameter] public EventCallback<int> HandleCitySelectEvent { get; set; }
    [Parameter] public EventCallback<int> HandleTownSelectEvent { get; set; }
    [Parameter] public EventCallback<int> HandleGeneralDepartmentSelectEvent { get; set; }
    [Parameter] public EventCallback<int> HandleDepartmentSelectEvent { get; set; }
    [Parameter] public EventCallback<int> HandleBranchSelectEvent { get; set; }
    [Parameter] public EventCallback<Employee> HandleSaveEmployeeEvent { get; set; }
    
    string FloatingNumber1 = "floatingNumber";
    string FloatingDiv1 = "floatingDiv";
    string FloatingNumber2 = "inactive-span";
    string FloatingDiv2 = "inactive-div";
    string ImageUploadMessage = "";
    public bool FirstLayer { get; set; } = true;
    public bool SecondLayer { get; set; } = false;
    public string? Title = "Add";
    public string GeneralDepartment {get; set;} ="";
    public string Department {get; set;} ="";
    public string Branch {get; set;} ="";
    public string Country {get; set;} ="";
    public string City {get; set;} ="";
    public string Town {get; set;} ="";
    
    protected override void OnInitialized()
    {
        AppState.Action += StateHasChanged;
    }
    public async Task UploadImage(InputFileChangeEventArgs args){
        if(args.File.Name.ToLower().Contains(".png") || args.File.Name.ToLower().Contains(".jpg")){
            var format = "image/png";
            var resizeImage = await args.File.RequestImageFileAsync(format, 300, 300);
            var buffer = new byte[resizeImage.Size];
            await resizeImage.OpenReadStream().ReadAsync(buffer);
            var imageData = $"data:{format}; base64, {Convert.ToBase64String(buffer)}";
            ImageUploadMessage = "";
            EmployeeGroup1.Photo = imageData;
            imageData = "";
            return;
        }
        ImageUploadMessage = "Png file needed";
        return;
    }
    private bool ValidateForm1()
    {
        if (string.IsNullOrEmpty(EmployeeGroup1.Name) || string.IsNullOrEmpty(EmployeeGroup1.Address) ||
        string.IsNullOrEmpty(EmployeeGroup1.TelephoneNumber)
        || string.IsNullOrEmpty(EmployeeGroup1.CivilId) || string.IsNullOrEmpty(EmployeeGroup1.FileNumber) ||
        string.IsNullOrEmpty(EmployeeGroup1.Photo))
            return false;
        else return true;
    }
    private bool ValidateForm2()
    {
        if (string.IsNullOrEmpty(EmployeeGroup2.JobName) || EmployeeGroup2.TownId == 0 || EmployeeGroup2.BranchId == 0)
            return false;
        else return true;
    }
    async Task CloseForm()
    {
        ShowAddOrUpdate = false;
        await NotifyFormClosed.InvokeAsync();
    }

    void Form1()
    {
        var isValid = ValidateForm1();
        if (isValid)
        {
            Employee.Name = EmployeeGroup1.Name;
            Employee.Address = EmployeeGroup1.Address;
            Employee.FileNumber = EmployeeGroup1.FileNumber;
            Employee.CivilId = EmployeeGroup1.CivilId;
            Employee.TelephoneNumber = EmployeeGroup1.TelephoneNumber;
            Employee.Photo = EmployeeGroup1.Photo;
            ShowLayer2();
        }
    }
    async Task Form2() { 
        var isValid = ValidateForm2();
        if(!isValid) return;
        Employee.TownId = EmployeeGroup2.TownId;
        Employee.JobName = EmployeeGroup2.JobName;
        Employee.BranchId = EmployeeGroup2.BranchId;
        Employee.Other = EmployeeGroup2.Other;
        await HandleSaveEmployeeEvent.InvokeAsync(Employee);
       
    }
    public void ClearContent(){
         EmployeeGroup1 = new();
        EmployeeGroup2 = new();
        Employee = new();
        StateHasChanged();
    }
    private void ShowLayer2()
    {
        FirstLayer = false;
        SecondLayer = true;
    }
    private void PrevClicked()
    {
        FirstLayer = true;
        SecondLayer = false;
    }
    public void OnCountryValueChange(ChangeEventArgs<string, Country> args)
    {
        HandleCountrySelectEvent.InvokeAsync(int.Parse(args.Value));
    }
    public void OnCityValueChange(ChangeEventArgs<string, City> args)
    {
        HandleCitySelectEvent.InvokeAsync(int.Parse(args.Value));
    }
    public void OnTownValueChange(ChangeEventArgs<string, Town> args)
    {
        EmployeeGroup2.TownId = int.Parse(args.Value);
    }
    public void OnGeneralDepartmentValueChange(ChangeEventArgs<string, GenaralDepartement> args)
    {
        HandleGeneralDepartmentSelectEvent.InvokeAsync(int.Parse(args.Value));
    }
    public void OnDepartmentValueChange(ChangeEventArgs<string, Department> args)
    {
        HandleDepartmentSelectEvent.InvokeAsync(int.Parse(args.Value));
    }

    public void OnBranchValueChange(ChangeEventArgs<string, Branch> args)
    {
        EmployeeGroup2.BranchId = int.Parse(args.Value);
    }

    public void Dispose() => AppState.Action -= StateHasChanged;

}
