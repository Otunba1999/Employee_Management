@implements IDisposable

@if(AppState.ShowBranch){
    <div class="container mt-5">
    <div class="row">
        <div class="col-lg-12">
            <div class="card">
                <div class="card-header">
                    <h4 class="float-start">Branches</h4>
                    <button class="btn btn-outline-success float-end" @onclick="AddButtonClicked"><i
                            class="bi bi-plus-circle-dotted"></i>Add Branch</button>
                </div>
                <div class="card-header" style="max-height: 580px; overflow-x: hidden; overflow-y: scroll;">
                    <div class="card-body">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th scope="col">#</th>
                                    <th scope="col">Id</th>
                                    <th scope="col">Department</th>
                                    <th scope="col">Branch</th>
                                    <th scope="col">Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if(Branches is not null){
                                    int count = 1;
                                    foreach(var branch in Branches){
                                        <tr>
                                            <th scope="row">@count</th>
                                            <td>@branch.Id</td>
                                            <td>@branch.Department!.Name</td>
                                            <td>@branch.Name</td>
                                            <td>
                                                <i class="bi bi-pencil text-info cursorStyle" @onclick="()=>EditClicked(branch)"></i>
                                                <i class="bi bi-trash text-danger cursorStyle"  @onclick="()=>DeleteClicked(branch)"></i>
                                            </td>
                                        </tr>
                                        count++;
                                    }
                                }else{
                                    <tr>
                                        <td colspan="4" class="alert alert-info text-center">No Branch added yet</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
}

<style>
    .cursorStyle {
        cursor: pointer;
    }
</style>
<BranchDialog @ref="BranchDialog" 
        Branch="Branch" 
        Departments="Departments" 
        HandleSaveOperationEvent="HandleSaveOperationEvent"></BranchDialog>

@code {
    public string Title { get; set; } = "Add";
    BranchDialog? BranchDialog;
    Branch Branch = new();
    public List<Department> Departments { get; set; } = new();
    public List<Branch> Branches { get; set; } = new();
    protected async override Task OnInitializedAsync()
    {
        await GetBranches();
        await GetDepartment();
        AppState.Action += StateHasChanged;
    }
    private async Task GetBranches()
    {
        Branches = await BranchService.GetAll(BaseUrl.BranchUrl);
    }
    private async Task GetDepartment()
    {
        Departments = await DepartementService.GetAll(BaseUrl.DepartementUrl);
    }
    void AddButtonClicked()
    {
        BranchDialog?.ChangeTitle("Add");
        Branch = new();
        OpenDialog();
    }
    void OpenDialog()
    {
        BranchDialog?.OpenDialog();
    }
    private async Task HandleSaveOperationEvent(Branch branch)
    {
        bool successCheck = false;
        if (branch.Id > 0)
        {
            var result = await BranchService.Update(BaseUrl.BranchUrl, branch);
            successCheck = await DisplayMessage(result.Flag, result.Message!);
        }else{
            var result = await BranchService.Insert(BaseUrl.BranchUrl, branch);
            successCheck = await DisplayMessage(result.Flag, result.Message!);
        }
        if(successCheck){
            Branch = new();
            await GetBranches();
            BranchDialog?.ChangeTitle("Add");
        }
    }
    private void EditClicked(Branch branch){
        BranchDialog?.ChangeTitle("Edit");
        Branch = branch ;
        OpenDialog();
    }
    private async Task DeleteClicked(Branch branch){
        bool confirm = await DialogService.ConfirmAsync($"Are you sure you want to Delete {branch.Name}?", "Confirm Delete");
        if(!confirm) return;
        var response = await BranchService.Delete(BaseUrl.BranchUrl, branch.Id);
        var result = await DisplayMessage(response.Flag, response.Message!);
        if(result) await GetBranches();
    }
    private async Task<bool> DisplayMessage(bool flag, string message){
        if(flag){
            await DialogService.AlertAsync(message, "Success Operation");
            return true;
        }else{
             await DialogService.AlertAsync(message, "Alert!");
            return false;
        }
    }
    public void Dispose(){
        AppState.Action -= StateHasChanged;
    }
}